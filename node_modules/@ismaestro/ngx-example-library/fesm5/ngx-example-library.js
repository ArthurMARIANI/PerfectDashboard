import { Injectable, Component, Input, APP_INITIALIZER, InjectionToken, NgModule, defineInjectable } from '@angular/core';
import * as moment_ from 'moment';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxExampleLibraryService = /** @class */ (function () {
    function NgxExampleLibraryService() {
    }
    NgxExampleLibraryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxExampleLibraryService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxExampleLibraryService.ngInjectableDef = defineInjectable({ factory: function NgxExampleLibraryService_Factory() { return new NgxExampleLibraryService(); }, token: NgxExampleLibraryService, providedIn: "root" });
    return NgxExampleLibraryService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ moment = moment_;
var NgxExampleLibraryComponent = /** @class */ (function () {
    function NgxExampleLibraryComponent() {
    }
    /**
     * @return {?}
     */
    NgxExampleLibraryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.date = moment().locale(this.locale).format('dddd, D MMMM, YYYY LT');
    };
    NgxExampleLibraryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ngx-example-library',
                    template: "<span>{{date}}</span>",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    NgxExampleLibraryComponent.ctorParameters = function () { return []; };
    NgxExampleLibraryComponent.propDecorators = {
        "locale": [{ type: Input },],
    };
    return NgxExampleLibraryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ OPTIONS = new InjectionToken('OPTIONS');
/**
 * @param {?} options
 * @return {?}
 */
function initialize(options) {
    console.log('Angular library has started with this options: ', options);
    return function () {
    };
}
var NgxExampleLibraryModule = /** @class */ (function () {
    function NgxExampleLibraryModule() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    NgxExampleLibraryModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: NgxExampleLibraryModule,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initialize,
                    deps: [OPTIONS],
                    multi: true
                },
                NgxExampleLibraryService
            ]
        };
    };
    NgxExampleLibraryModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxExampleLibraryComponent],
                    exports: [NgxExampleLibraryComponent]
                },] },
    ];
    return NgxExampleLibraryModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxExampleLibraryService, NgxExampleLibraryComponent, OPTIONS, initialize, NgxExampleLibraryModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWV4YW1wbGUtbGlicmFyeS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LWV4YW1wbGUtbGlicmFyeS9saWIvbmd4LWV4YW1wbGUtbGlicmFyeS5zZXJ2aWNlLnRzIiwibmc6Ly9uZ3gtZXhhbXBsZS1saWJyYXJ5L2xpYi9uZ3gtZXhhbXBsZS1saWJyYXJ5LmNvbXBvbmVudC50cyIsIm5nOi8vbmd4LWV4YW1wbGUtbGlicmFyeS9saWIvbmd4LWV4YW1wbGUtbGlicmFyeS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RXhhbXBsZUxpYnJhcnlTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQnO1xuXG5jb25zdCBtb21lbnQgPSBtb21lbnRfO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItbmd4LWV4YW1wbGUtbGlicmFyeScsXG4gIHRlbXBsYXRlOiBgPHNwYW4+e3tkYXRlfX08L3NwYW4+YCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFeGFtcGxlTGlicmFyeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgbG9jYWxlOiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZGF0ZSA9IG1vbWVudCgpLmxvY2FsZSh0aGlzLmxvY2FsZSkuZm9ybWF0KCdkZGRkLCBEIE1NTU0sIFlZWVkgTFQnKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtBUFBfSU5JVElBTElaRVIsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05neEV4YW1wbGVMaWJyYXJ5Q29tcG9uZW50fSBmcm9tICcuL25neC1leGFtcGxlLWxpYnJhcnkuY29tcG9uZW50JztcbmltcG9ydCB7Tmd4RXhhbXBsZUxpYnJhcnlTZXJ2aWNlfSBmcm9tICcuL25neC1leGFtcGxlLWxpYnJhcnkuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBPUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ09QVElPTlMnKTtcblxuZXhwb3J0IGludGVyZmFjZSBTYW1wbGVNb2R1bGVPcHRpb25zIHtcbiAgY29uZmlnOiB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemUob3B0aW9uczogYW55KSB7XG4gIGNvbnNvbGUubG9nKCdBbmd1bGFyIGxpYnJhcnkgaGFzIHN0YXJ0ZWQgd2l0aCB0aGlzIG9wdGlvbnM6ICcsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICB9O1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4RXhhbXBsZUxpYnJhcnlDb21wb25lbnRdLFxuICBleHBvcnRzOiBbTmd4RXhhbXBsZUxpYnJhcnlDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5neEV4YW1wbGVMaWJyYXJ5TW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qob3B0aW9ucz86IFNhbXBsZU1vZHVsZU9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neEV4YW1wbGVMaWJyYXJ5TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBPUFRJT05TLCB1c2VWYWx1ZTogb3B0aW9uc30sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgdXNlRmFjdG9yeTogaW5pdGlhbGl6ZSxcbiAgICAgICAgICBkZXBzOiBbT1BUSU9OU10sXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgTmd4RXhhbXBsZUxpYnJhcnlTZXJ2aWNlXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtJQU9FO0tBQ0M7O2dCQU5GLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O21DQUpEOzs7Ozs7O0FDQUEsQUFHQSxxQkFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDOztJQVlyQjtLQUNDOzs7O0lBRUQsNkNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzFFOztnQkFmRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsTUFBTSxFQUFFLEVBQUU7aUJBQ1g7Ozs7OzJCQUdFLEtBQUs7O3FDQVpSOzs7Ozs7O0FDQUEscUJBSWEsT0FBTyxHQUFHLElBQUksY0FBYyxDQUFTLFNBQVMsQ0FBQyxDQUFDOzs7OztBQU03RCxvQkFBMkIsT0FBWTtJQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlEQUFpRCxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLE9BQU87S0FDTixDQUFDO0NBQ0g7Ozs7Ozs7O0lBUVEsK0JBQU87Ozs7SUFBZCxVQUFlLE9BQTZCO1FBQzFDLE9BQU87WUFDTCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQztnQkFDckM7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxVQUFVO29CQUN0QixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7b0JBQ2YsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0Qsd0JBQXdCO2FBQ3pCO1NBQ0YsQ0FBQztLQUNIOztnQkFwQkYsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxFQUFFO29CQUNYLFlBQVksRUFBRSxDQUFDLDBCQUEwQixDQUFDO29CQUMxQyxPQUFPLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQztpQkFDdEM7O2tDQXBCRDs7Ozs7Ozs7Ozs7Ozs7OyJ9