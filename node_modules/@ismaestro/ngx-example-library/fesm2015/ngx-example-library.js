import { Injectable, Component, Input, APP_INITIALIZER, InjectionToken, NgModule, defineInjectable } from '@angular/core';
import * as moment_ from 'moment';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxExampleLibraryService {
    constructor() {
    }
}
NgxExampleLibraryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxExampleLibraryService.ctorParameters = () => [];
/** @nocollapse */ NgxExampleLibraryService.ngInjectableDef = defineInjectable({ factory: function NgxExampleLibraryService_Factory() { return new NgxExampleLibraryService(); }, token: NgxExampleLibraryService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ moment = moment_;
class NgxExampleLibraryComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.date = moment().locale(this.locale).format('dddd, D MMMM, YYYY LT');
    }
}
NgxExampleLibraryComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ngx-example-library',
                template: `<span>{{date}}</span>`,
                styles: []
            },] },
];
/** @nocollapse */
NgxExampleLibraryComponent.ctorParameters = () => [];
NgxExampleLibraryComponent.propDecorators = {
    "locale": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ OPTIONS = new InjectionToken('OPTIONS');
/**
 * @param {?} options
 * @return {?}
 */
function initialize(options) {
    console.log('Angular library has started with this options: ', options);
    return function () {
    };
}
class NgxExampleLibraryModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: NgxExampleLibraryModule,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initialize,
                    deps: [OPTIONS],
                    multi: true
                },
                NgxExampleLibraryService
            ]
        };
    }
}
NgxExampleLibraryModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [NgxExampleLibraryComponent],
                exports: [NgxExampleLibraryComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxExampleLibraryService, NgxExampleLibraryComponent, OPTIONS, initialize, NgxExampleLibraryModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWV4YW1wbGUtbGlicmFyeS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LWV4YW1wbGUtbGlicmFyeS9saWIvbmd4LWV4YW1wbGUtbGlicmFyeS5zZXJ2aWNlLnRzIiwibmc6Ly9uZ3gtZXhhbXBsZS1saWJyYXJ5L2xpYi9uZ3gtZXhhbXBsZS1saWJyYXJ5LmNvbXBvbmVudC50cyIsIm5nOi8vbmd4LWV4YW1wbGUtbGlicmFyeS9saWIvbmd4LWV4YW1wbGUtbGlicmFyeS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RXhhbXBsZUxpYnJhcnlTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQnO1xuXG5jb25zdCBtb21lbnQgPSBtb21lbnRfO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItbmd4LWV4YW1wbGUtbGlicmFyeScsXG4gIHRlbXBsYXRlOiBgPHNwYW4+e3tkYXRlfX08L3NwYW4+YCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFeGFtcGxlTGlicmFyeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgbG9jYWxlOiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZGF0ZSA9IG1vbWVudCgpLmxvY2FsZSh0aGlzLmxvY2FsZSkuZm9ybWF0KCdkZGRkLCBEIE1NTU0sIFlZWVkgTFQnKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtBUFBfSU5JVElBTElaRVIsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05neEV4YW1wbGVMaWJyYXJ5Q29tcG9uZW50fSBmcm9tICcuL25neC1leGFtcGxlLWxpYnJhcnkuY29tcG9uZW50JztcbmltcG9ydCB7Tmd4RXhhbXBsZUxpYnJhcnlTZXJ2aWNlfSBmcm9tICcuL25neC1leGFtcGxlLWxpYnJhcnkuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBPUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ09QVElPTlMnKTtcblxuZXhwb3J0IGludGVyZmFjZSBTYW1wbGVNb2R1bGVPcHRpb25zIHtcbiAgY29uZmlnOiB7fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemUob3B0aW9uczogYW55KSB7XG4gIGNvbnNvbGUubG9nKCdBbmd1bGFyIGxpYnJhcnkgaGFzIHN0YXJ0ZWQgd2l0aCB0aGlzIG9wdGlvbnM6ICcsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICB9O1xufVxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4RXhhbXBsZUxpYnJhcnlDb21wb25lbnRdLFxuICBleHBvcnRzOiBbTmd4RXhhbXBsZUxpYnJhcnlDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5neEV4YW1wbGVMaWJyYXJ5TW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3Qob3B0aW9ucz86IFNhbXBsZU1vZHVsZU9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neEV4YW1wbGVMaWJyYXJ5TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBPUFRJT05TLCB1c2VWYWx1ZTogb3B0aW9uc30sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgdXNlRmFjdG9yeTogaW5pdGlhbGl6ZSxcbiAgICAgICAgICBkZXBzOiBbT1BUSU9OU10sXG4gICAgICAgICAgbXVsdGk6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgTmd4RXhhbXBsZUxpYnJhcnlTZXJ2aWNlXG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtJQU9FO0tBQ0M7OztZQU5GLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztBQ0pELEFBR0EsdUJBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQztBQU92QjtJQUtFO0tBQ0M7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0tBQzFFOzs7WUFmRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtnQkFDbkMsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsTUFBTSxFQUFFLEVBQUU7YUFDWDs7Ozs7dUJBR0UsS0FBSzs7Ozs7OztBQ1pSLHVCQUlhLE9BQU8sR0FBRyxJQUFJLGNBQWMsQ0FBUyxTQUFTLENBQUMsQ0FBQzs7Ozs7QUFNN0Qsb0JBQTJCLE9BQVk7SUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpREFBaUQsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN4RSxPQUFPO0tBQ04sQ0FBQztDQUNIO0FBT0Q7Ozs7O0lBQ0UsT0FBTyxPQUFPLENBQUMsT0FBNkI7UUFDMUMsT0FBTztZQUNMLFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNULEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFDO2dCQUNyQztvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxFQUFFLFVBQVU7b0JBQ3RCLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztvQkFDZixLQUFLLEVBQUUsSUFBSTtpQkFDWjtnQkFDRCx3QkFBd0I7YUFDekI7U0FDRixDQUFDO0tBQ0g7OztZQXBCRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFLENBQUMsMEJBQTBCLENBQUM7Z0JBQzFDLE9BQU8sRUFBRSxDQUFDLDBCQUEwQixDQUFDO2FBQ3RDOzs7Ozs7Ozs7Ozs7Ozs7In0=